rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    function isAdministrator() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.isAdministrator;
    }

    function isProjectMember() {
      return request.auth != null && request.auth.uid in resource.data.memberUserIds;
    }

    function isProjectMemberById(projectId) {
      return request.auth != null && request.auth.uid in get(/databases/$(database)/documents/projects/$(projectId)).data.memberUserIds
    }

    function isNotAffectingForbiddenKeys() {
      return !request.resource.data.diff(resource.data).affectedKeys().hasAny([
        // Common
        'id',
        'createdAt',
        // User
        'isAdministrator',
      ]);
    }

    match /users/{userId} {
      allow get: if isAdministrator() || request.auth.uid == userId;
      allow list: if isAdministrator() || request.query.limit <= 1; // For Authentication
      allow create: if request.auth.uid == userId && !request.resource.data.isAdministrator;
      allow update: if request.auth.uid == userId && isNotAffectingForbiddenKeys();
    }

    match /projects/{projectId} {
      allow read: if isAdministrator() || isProjectMember() || resource.data.isPublic == true;
      allow create: if request.auth != null && request.auth.uid in request.resource.data.administratorUserIds && request.auth.uid in request.resource.data.memberUserIds;
      allow update: if isProjectMember() && isNotAffectingForbiddenKeys();

      match /submissions/{submissionId} {
        allow read: if true;
        allow create: if isProjectMemberById(projectId);
        allow update: if isProjectMemberById(projectId) && isNotAffectingForbiddenKeys();
      }
    }

  }
}
